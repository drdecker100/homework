##########################################################################################################
##########################################################################################################
'''
Given an array of integers nums and an integer target, return indices of the two numbers 
such that they add up to target.

'''

#return indices of integers (0,3),(4,5)

def twoIndex(nums,target):                  #define function wth 2 params           
    new =[]                                 #create empty list for indexes
    seen = {}                               #create empty dict for seen to compare with diff
        
    for i, v in enumerate(nums):            #enumerate for index and value
        #0 2
        #1 15
        #2 11
        #3 7
        remaining = target - v              #remaining value from target and value
        #rem = 9 - 2 = 7
        #rem = 9 -15 = -6
        #rem = 9 -11 = -2
        #rem = 9 - 7 = 2
            
        if remaining in seen:               #check if the remaining value exist, if not else runs
            #7 not in seen
            #-6 not in seen
            #-2 not in seen
            #2 is in seen
                
            new_ls = seen[remaining], i    #if it does, we create a new_ls with value of seen dict
            #new_ls = seen[2],3
            #new_ls = 0,3
            new.append(new_ls)              #append to new varible
        else:                               #create a dict pair 
            seen[v]=i                       #value as key and index as value
            #{2:0, 15:1, 11:2}   
            #{15:1}
            
    
    return new  

numb = [2,15,11,7,8,1]
targ = 9
    
print(twoIndex(numb,targ))

##########################################################################################################
##########################################################################################################
'''
Given an array of intergers and an integer k, you need to find the total number of continuous subarrays whose sum equals to k
'''

def subarraysum(nums,k):                     #define function with 2 params

    seen={}                                  #we create a dict for seen to hold our totalsum and count
    tsum=0                                   #set total sum to 0
    cout=0                                   #set count to 0
    
    for i in nums:                           #loop thru array
        #9
        #4
        #20
        tsum+=i                              #initiate by increment totalsum with first element
        #tsum=9+0=9
        #tsum=4+9=13
        #tsum=20+13=33
        remaining = tsum-k                   #rem will be total sum minus targ
        #rem = 9-33 = -24
        #rem = 13-33 =-20
        #rem = 33-33 = 0
    
        if remaining == 0:                   #check if rem will be equal to 0, else will run
            #rem(-24) != 0
            #rem(-20) != 0
            #rem(0) == 0
            seen[tsum]=1                     #if it it, we create a dict pair with tsum as key, 1 as value
            #{33:1}
            cout+=1                          #we then increment our count
            #1
            
        elif remaining in seen:              #else if remianing is in dict
            #rem(-24) not in seen
            #rem(-20) not in seen
            cout+=seen[remaining]            #we increment count by value
            
        elif tsum in seen:                   #if the total sum is in seen
            #tsum(9) != seen
            #tsum(13) != seen
            seen[tsum]+=1                    #we increment the value 
            
    
        else:
            seen[tsum]=1                     #if conditions are not met, we create a dict pair 
            #{9:1,13:1}
                       
    return cout

numb = [9, 4, 20, 3, 10, 5]
targ = 33
    
print(subarraysum(numb,targ))

##########################################################################################################
##########################################################################################################
Given a sorted array nums, remove the duplicates in-place such that each element appears only once and returns the new length.
Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.
output= [1,2,3,4,5]

def rmdup(nums):
    return len(set(nums)), set(nums)

print(rmdup([1,1,3,5,6,7,7]))

##########################################################################################################
##########################################################################################################
'''
Given a sorted array nums, remove the duplicates in-place such that each element appears only once and returns the new length.
Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.
output= [0,0,1,1,2,2,3,3,4,4]
'''
numb = [0,0,1,1,1,2,2,3,3,4,4,4,4]

def rmduplicate(nums):

    i=0                                 #initialize a count variable       
    while i < len(nums)-2:              #start a loop to compare numbers in first index to third index 
        # i(0) < 14 -2=12               #if len(num)=14 will return out of range
        # i(1) < 12
        #i(2) <12
        if nums[i] == nums[i+2]:    #delete number of third index if equals to the first index
            # nums[0] == nums[2] > 0 != 1
            # nums[1] == nums[3] > 0 != 1
            # nums[2] == nums[4]  > 1 == 1 
            #nums[3]  == nums[5]  > 1 == 2
            
            del nums[i+1]           #if it matchs, we del it from the array and continue the loop
            #rm nums[3]    
            
            
            continue 
        i+=1                       #else we increase the count and start the loop
        #i=1
        #i=2
    
    #Return len of the array 
    return len(nums), nums          #return length of nums
    
print(rmduplicate(numb))

##########################################################################################################
##########################################################################################################
'''
Given a sorted array nums, remove the duplicates in-place such that each element appears only once and returns the new length.
Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.
output = [1,2,3,4,5]
'''
numb = [0,0,1,1,1,2,2,3,3,4,4,4,4]

def rmduplicate(nums):

    i=0                                 #initialize a count variable       
    while i < len(nums)-1:              #start a loop to compare numbers in first index to third index 
        # i(0) < 14 -2=12               #if len(num)=14 will return out of range
        # i(1) < 12
        #i(2) <12
        if nums[i] == nums[i+1]:         #delete number of second index if equals to the first index
            # nums[0] == nums[1] > 0 == 0
            #start again nums [0] == nums[1] > 0 !=1
                        
            del nums[i+1]                #if it matchs, we del it from the array and continue the loop
            #rm nums[1]    
                       
            continue 
        i+=1                             #else we increase the count and start the loop
        #i=1
       
    
    return len(nums), nums               #return length of nums
    
print(rmduplicate(numb))

##########################################################################################################
##########################################################################################################
'''
Given an array of integers greater than zero, 
##find if it is possible to split it into two subarrays
(without ordering the elements), such that the sum of the two subarrays is the same.
'''

def splitarray(nums):
    for i in range(0, len(nums)):                      #i(0) loop thru 0 to len(arr)
        if sum(nums[:i+1])==sum(nums[i+1:]):           #if sum of the left arr equals right
            #nums[:1]=1 , nums[1:]= [2,3,4]
            return nums[:i+1],nums[i+1:]               #return slice of the left side, right side
        
print(splitarray([1,2,2,0,1]))

##########################################################################################################
##########################################################################################################

Given an array nums, write a function to move all 0's to the end maintaining the relative order of the non-zero elements.
numb = [0,1,0,3,12]
new=[]

def move(nums):
    i=0
    while i < len(nums): 
        if nums[i] == 0 :
            del nums[i] 
            new.append(0)
            continue
        
        i+=1
    nums.extend(new)

    return nums

print(move(numb))


##########################################################################################################
##########################################################################################################
**"given an array of integers, Find the maximum product of two integers in an array.
numb = [-10,-3,5,8,-2]

def maxproduct(num):

    num.sort()

    val1=num[0]*num[1]
    val2=num[-1]*num[-2]
    
    if val1==val2:
        return (num[0], num[1]), (num[-1], num[-2]) 
    
    elif val1 > val2:
        return num[0], num[1] 

    else: 
        return num[-1], num[-2]

print (maxproduct(numb))

##########################################################################################################
##########################################################################################################



this data was in a text file and i was told to sort based on interface rate from highest to lowest

fa0/0 10 2 infi 

fa0/1 20 12 inf2

fae/2 5 9 inf3

fa0/3 50 90 inf4

new_list=[]

with open('interface-list.txt', 'r') as f: 
  data=f.read().splitlines() 
  for i in data:
    new_list.append(i.split()) 
new_list.sort(key=lambda x:int(x[2]), reverse=True) 
print(new_list)

###########################################################################
###########################################################################

###PIG LATEN ###
#def functionName(params):

def piglaten(sentence):
    ##split sentence into words
    
    words = sentence.split()

##loop through words and convert to pig latin

##if starts with vowel, just add "yay"

##Otherwise, move the first consonant cluster to the end, and add "ay"

    new_words = []
    
    for word in words:
        if word[0] in "aeiou":
            new_word = word + "yay"
            new_words.append(new_word)
        else:
            vowel_pos = 0
            for letter in word:
                if letter not in "aeiou":
                    vowel_pos = vowel_pos + 1
                else:
                    break
            cons = word[:vowel_pos]
            the_rest = word[vowel_pos:]
            new_word = the_rest + cons + "ay"
            new_words.append(new_word)
    
    ##stick back together
    output = " ".join(new_words)
    
    ##output the final string
    return(output)
    
sentence = input("Enter a sentence: ").strip().lower()
    
print(piglaten("my name is kwame"))

##########################################################################################################
##########################################################################################################

#####reversing a word #####
def rev(text):
	return text[::-1]
  
 ##########################################################################################################
##########################################################################################################
PACKING AND UNPACKING USING ARGS AND KWARGS( * args and **kwargs)

numbers = [1,2,3,4,5]
print(numbers)		#passing 1 argument to the print function
>>>  [1,2,3,4,5]

#unpacking the argument 
print(*numbers)
>>>  1 2 3 4 5

def add(*numbers):       # def add(*args):
	total = 0
	for number in numbers:
		total = total + number
	return(total)   

add(1,2,3,4,5,6,7,8,9)
45

def about(name, age, likes):
	sentence = "Meet {}! They are {} years old and they like {}".format(name, age, likes)
	return sentence

dictionary = {"name":"Ziyad","age":23,"likes" = "Python"}
about(**dictionary)
Meet {}! They are {} years old and they like {}
#that unpacks all the keywrd arguments

about(name= "Ziyad", age = 23, likes = "Python")
Meet {}! They are {} years old and they like {}

##########################################################################################################
##########################################################################################################
###count vowels in letters###
word= "sefah"
count =0
for letter in word:
    if letter in "aeiou":        
       count = count + 1
       continue
print(count)

###count vowels and consonant in letters###
word= "sefah"
vowel_count=0
cons_count=0
for letter in word:
    if letter in "aeiou":
       vowel_count = vowel_count + 1
    else:
        cons_count = cons_count + 1
        
print(vowel_count)
print(cons_count)


##########################################################################################################
##########################################################################################################
###count letter in word

word = "missippisolustion"
#
def wcount(text,char):               #create function with 2 params
    
    return text.count(char)          #string method count to find the number of occurences

print(wcount(word,"s"))              #call function
    

def wcount(text,char):
    cout = 0                        #set count to 0
    
    for letter in text:
        if letter == char:          #if letter is equal to char
            cout = cout+1           #increment count
    
    return cout
print(wcount(word,"s"))


##########################################################################################################
##########################################################################################################
###matching items in two different arrays

arr1 = ["Kofi","kwesi", "sefah","kate"]

arr2 = ["Meggy", "kofi","Kate", "Russ"]

for name1 in arr1:
    #kofi
    for name2 in arr2:
        #Meggy
        if name1.lower() == name2.lower():
            print(name1)


##########################################################################################################
##########################################################################################################
'''
Open two data files
2. Read the data in both files
a. Merge the data from both files together
b. Delete duplicate data
i. Print a message to the user if you detect a duplicate data record. Include the
record data in the message.
c. Sort the data and output to a file. The output file should have the same format as the
two input files

'''
def handle(txt1,txt2):
    d ={}                                        #empty dict 
     
    f1 = open(txt1)                              #open file    
    for line in f1:                              #loop through file and manipulate
        #192.12.2.2,60
        ip, port = line.strip("\n").split(",")   #store fields in ip and port
        #[192.168.2.2 60]
        d[ip] = [port]                           #dict pair of ip and port. List so you can append to it
    
    f2 = open(txt2)                              #open second file
    for line in f2:                              #loop through file 
        #192.12.2.2,60
        ip, port = line.strip("\n").split(",")   #strip new line and split by ","
        #[192.12.2.2 60]
        if ip not in d:                          #if key is not in dict, we add the dict pair
            d[ip] = [port]
        else:                                    #else we ignore
            print("duplicate data record,ip= {},port= {}".format(ip,port))
            pass                                    
       
    print(d)    
    fnlist = sorted(d, key=lambda item: d[item], reverse=True)        #reverse and print only key
    print(fnlist)
    
    #fnlist = dict(sorted(d.items(), key=lambda item: item[1], reverse= True)) #reverse dictionary
   
    f1.close()
    f2.close()
    #f3.close()
    
handle("log1.txt","log2.txt")

##sort dictionary
#sorted_file = []
#for item in sorted(d.items()):
#    sorted_file.append(item)

#write output to a new file
#with open("output.txt", mode = "w") as file:
#    file.write(str(sorted_file))

    
#    f3 = open("output2.txt", "w")                #open a write file
#    for k,v in sorted(d.items()):                #sorting by key
#        item = str(k)+","+str(v[0])              # manipulating string            
#        f3.write(item)                           #write to file
#        f3.write("\n")                           #add new line




##########################################################################################################
##########################################################################################################
'''
You will be supplied with two data files in CSV format .
The first file contains statistics about various dinosaurs. 
The second file contains additional data.
Given the following formula, `speed = ((STRIDE_LENGTH / LEG_LENGTH) - 1) * SQRT(LEG_LENGTH * g)`
Where g = 9.8 m/s^2 (gravitational constant)

Write a program to read in the data files from disk, it must then print the names of only 
the bipedal dinosaurs from fastest to slowest.
Do not print any other information.

$ cat dataset1.csv
NAME,LEG_LENGTH,DIET
Hadrosaurus,1.4,herbivore
Struthiomimus,0.72,omnivore
Velociraptor,1.8,carnivore
Triceratops,0.47,herbivore
Euoplocephalus,2.6,herbivore 
Stegosaurus,1.50,herbivore
Tyrannosaurus Rex,6.5,carnivore

$ cat dataset2.csv 
NAME,STRIDE_LENGTH,STANCE
Euoplocephalus,1.97,quadrupedal
Stegosaurus,1.70,quadrupedal
Tyrannosaurus Rex,4.76,bipedal
Hadrosaurus,1.3,bipedal
Deinonychus,1.11,bipedal
Struthiomimus,1.24,bipedal
Velociraptor,2.62,bipedal
'''
'''
speed = ((STRIDE_LENGTH / LEG_LENGTH) - 1) * SQRT(LEG_LENGTH * g)`
Where g = 9.8 m/s^2 (gravitational constant)
'''

from math import sqrt

def printbi(DinoInfo, AddInfo):
   
    g = 9.8                                         #variable to hold constant
    
    d = {}                                          #empty dict for name and speed value
    
    f1 = open(AddInfo)                              #open AddInfo and search for bipedal chxn
    for line in f1:                                 #iterate thru content
        if "bipedal" in line:                       #if there is a match
            fields = line.strip("\n").split(",")    #strip newline and split by ",",returns a list
            
            name = str.lower(fields[0])             #store first object as name. lower is an option
            stride_length = float(fields[1])        #store second object as stride_length
            
            f2 = open(DinoInfo)                     #open DinoInfo for search for leg length for name
            for line in f2:                         #loop thru
                if name in str.lower(line):         # if name matches the line 
                    fields = line.strip('\n').split(',')        #return fields
                                       
                    leg_length = float(fields[1])               #second object as leg_length and feed value to find spped        
                    speed = ((stride_length / leg_length) - 1) * sqrt(leg_length * g)
                    
                    d[name] = speed                 #dictonary pair of names and speeds
    
    fnlist = sorted(d, key=lambda x: d[x], reverse=True)        #reverse and print only key
    print(fnlist)
    #fnlist = dict(sorted(d.items(), key=lambda item: item[1]))  #reverse dictionary
    
    f1.close()
    f2.close()
                                           
printbi("dataset1.csv", "dataset2.csv")  

##########################################################################################################
##########################################################################################################

"""
Using dictionary, create the best possible data structure to group this data set better.
The code should be scalable, in that, the code group any new data center and devices 
to the old devices

"""

devices= [
'ssw001.abc1', 'ssw002.abc1', 'ssw003.abc1', 'ssw012.dec1',
'ssw004.abc1', 'ssw005.abc1', 'ssw006.dec1', 'ssw007.dec1', 
'ssw008.xyz2', 'ssw009.xyz2', 'ssw010.xyz2', 'ssw011.xyz2', 
'esw001.abc1', 'esw002.abc1', 'esw003.abc1', 'esw004.abc1', 
'esw005.abc1', 'esw006.abc1', 'esw007.xyz2', 'esw008.xyz2', 
'fsw001.abc1', 'fsw002.abc1', 'fsw003.abc1', 'fsw004.abc1',
'fsw001.abc1', 'fsW002.abc1', 'fsw003.xyz2', 'fsw004.xyz2']

d = {}                                     #create empty dict

f = open("demofile4.txt","r")              #read file to variable f

for device in f:                           #iterate through content of file,f
    
    device = device.strip("\n")            #strip newline off , string method
    value, key = device.split(".")         #split by "." ; returns list
    #[ssw001 abc1]
    if key not in d:                       #if key is not in dictionary
        d[key]=[value]                     #add key and value pair to dict
        #d ={"abc1":["ssw001"]}            #value is list so we can append to it
    else:
        d[key].append(value)               #value is append to the dict if key exists
    
print(d)

f.close()
    
#f = open("demofile.csv","w+")             #to create file
#for device in devices:           
#   f.write(device)
#   f.write("\n")
#   
#f.close()

#"r" - Read - Default value. Opens a file for reading, error if the file does not exist
#"a" - Append - Opens a file for appending, creates the file if it does not exist
#"w" - Write - Opens a file for writing, creates the file if it does not exist
#"x" - Create - Creates the specified file, returns an error if the file exists

##########################################################################################################
##########################################################################################################

str1 = "Hadrosaurus,1.4,herbivore"

str1 = str1.split(",")
#["H...s","1.4","herb.."]
d={}

d[str1[0]]=str1[1:]

print(d)


##########################################################################################################
##########################################################################################################